apiVersion: v1
kind: Service
metadata:
  name: backend
  namespace: cinema
spec:
  type: ClusterIP
  selector:
    app: backend
  ports:
    - name: http
      port: 8000
      targetPort: 8000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: cinema
spec:
  replicas: 2
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      initContainers:
        - name: wait-dns
          image: busybox:1.36
          command: ['sh','-c','until nslookup postgres.cinema.svc.cluster.local >/dev/null 2>&1; do echo "waiting for DNS..."; sleep 2; done']
        - name: wait-db
          image: postgres:16-alpine
          env:
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: POSTGRES_PASSWORD
          command: ['sh','-c','until pg_isready -h postgres -p 5432 -U cinema -d cinema; do echo "waiting for postgres..."; sleep 2; done'
          # ... (el resto igual)

      containers:
        - name: backend
          image: mnifla/cinema-backend:1.0
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8000
          env:
            # URL completa estilo SQLAlchemy (por si tu app la soporta)
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: POSTGRES_DB
            # Variables sueltas comunes
            - name: DB_HOST
              value: postgres
            - name: DB_PORT
              value: "5432"
            - name: DB_NAME
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: POSTGRES_DB
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: POSTGRES_USER
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: POSTGRES_PASSWORD
          readinessProbe:
            httpGet:
              path: /health
              port: 8000
            initialDelaySeconds: 10
            periodSeconds: 5
          livenessProbe:
            httpGet:
              path: /health
              port: 8000
            initialDelaySeconds: 20
            periodSeconds: 10
