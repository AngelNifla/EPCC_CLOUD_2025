#!/bin/bash
set -xe

dnf update -y
dnf install -y python3 git -y
python3 -m ensurepip --upgrade || true
pip3 install flask gunicorn

mkdir -p /opt/cineapp
cd /opt/cineapp

# Copiar los archivos de la app desde el cÃ³digo incluido en el template
# En lugar de interpolar, aquÃ­ vamos a clonar los archivos directamente
# Los pegaremos en /opt/cineapp cuando empieces a versionar (por ahora se crea in situ)

# Crear el archivo principal
cat > app.py <<"PY"
# === APP FLASK ===
from flask import Flask, render_template, request, redirect, url_for
import sqlite3, os
app = Flask(__name__)
DB_PATH = os.path.join(os.path.dirname(__file__), 'cine.db')
def get_db():
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    return conn
@app.route('/')
def index():
    conn = get_db()
    movies = conn.execute("SELECT * FROM peliculas").fetchall()
    conn.close()
    return render_template('index.html', movies=movies)
@app.route('/movie/<int:movie_id>')
def movie(movie_id):
    conn = get_db()
    movie = conn.execute("SELECT * FROM peliculas WHERE id=?", (movie_id,)).fetchone()
    funciones = conn.execute("SELECT * FROM funciones WHERE pelicula_id=?", (movie_id,)).fetchall()
    conn.close()
    return render_template('movie.html', movie=movie, funciones=funciones)
@app.route('/checkout/<int:funcion_id>', methods=['GET','POST'])
def checkout(funcion_id):
    conn = get_db()
    funcion = conn.execute("SELECT f.*, p.titulo FROM funciones f JOIN peliculas p ON f.pelicula_id=p.id WHERE f.id=?", (funcion_id,)).fetchone()
    if request.method == 'POST':
        qty = int(request.form['cantidad'])
        stock = funcion['stock']
        if qty <= 0 or qty > stock:
            return render_template('checkout.html', funcion=funcion, error="Cantidad no vÃ¡lida.")
        new_stock = stock - qty
        conn.execute("UPDATE funciones SET stock=? WHERE id=?", (new_stock, funcion_id))
        conn.commit()
        conn.close()
        return redirect(url_for('confirm', titulo=funcion['titulo'], qty=qty))
    conn.close()
    return render_template('checkout.html', funcion=funcion)
@app.route('/confirm')
def confirm():
    titulo = request.args.get('titulo')
    qty = request.args.get('qty')
    return render_template('confirm.html', titulo=titulo, qty=qty)
@app.route('/health')
def health():
    return {"ok": True}, 200
if __name__ == '__main__':
    app.run(host='0.0.0.0', port=80)
PY

# === BASE DE DATOS ===
cat > db_init.py <<"PY"
import sqlite3, os
DB_PATH = os.path.join(os.path.dirname(__file__), 'cine.db')
if os.path.exists(DB_PATH):
    os.remove(DB_PATH)
conn = sqlite3.connect(DB_PATH)
c = conn.cursor()
c.execute("CREATE TABLE peliculas (id INTEGER PRIMARY KEY AUTOINCREMENT, titulo TEXT, descripcion TEXT, poster TEXT)")
c.execute("CREATE TABLE funciones (id INTEGER PRIMARY KEY AUTOINCREMENT, pelicula_id INTEGER, fecha TEXT, hora TEXT, sala TEXT, stock INTEGER, FOREIGN KEY (pelicula_id) REFERENCES peliculas (id))")
peliculas=[("Interstellar","Viaje a travÃ©s del espacio y el tiempo.","interstellar.jpg"),("Oppenheimer","El padre de la bomba atÃ³mica.","oppenheimer.jpg"),("Inception","El sueÃ±o dentro del sueÃ±o.","inception.jpg"),("Avatar 2","El regreso a Pandora.","avatar2.jpg"),("Dune 2","La Ã©pica continuaciÃ³n del universo de Dune.","dune2.jpg")]
c.executemany("INSERT INTO peliculas (titulo,descripcion,poster) VALUES (?,?,?)",peliculas)
funciones=[(1,"2025-10-29","18:00","Sala 1",20),(1,"2025-10-30","21:00","Sala 2",15),(2,"2025-10-29","19:00","Sala 1",25),(2,"2025-10-30","22:00","Sala 3",10),(3,"2025-10-29","20:00","Sala 4",18),(4,"2025-10-29","17:30","Sala 2",12),(4,"2025-10-30","20:30","Sala 1",14),(5,"2025-10-30","19:45","Sala 5",30)]
c.executemany("INSERT INTO funciones (pelicula_id,fecha,hora,sala,stock) VALUES (?,?,?,?,?)",funciones)
conn.commit(); conn.close()
PY

# === PLANTILLAS ===
mkdir -p templates static
cat > templates/index.html <<"HTML"
<!DOCTYPE html><html lang="es"><head><meta charset="UTF-8"><title>CinemAQP</title><link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}"></head><body><h1>Cartelera CinemAQP ðŸŽ¬</h1><div class="movies">{% for m in movies %}<div class="card"><h2>{{ m['titulo'] }}</h2><p>{{ m['descripcion'] }}</p><a href="{{ url_for('movie', movie_id=m['id']) }}">Ver funciones</a></div>{% endfor %}</div></body></html>
HTML

cat > templates/movie.html <<"HTML"
<!DOCTYPE html><html lang="es"><head><meta charset="UTF-8"><title>{{ movie['titulo'] }}</title><link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}"></head><body><h1>{{ movie['titulo'] }}</h1><p>{{ movie['descripcion'] }}</p><table><tr><th>Fecha</th><th>Hora</th><th>Sala</th><th>Stock</th><th></th></tr>{% for f in funciones %}<tr><td>{{ f['fecha'] }}</td><td>{{ f['hora'] }}</td><td>{{ f['sala'] }}</td><td>{{ f['stock'] }}</td><td>{% if f['stock']>0 %}<a href="{{ url_for('checkout', funcion_id=f['id']) }}">Comprar</a>{% else %}Agotado{% endif %}</td></tr>{% endfor %}</table><a href="/">â¬… Volver</a></body></html>
HTML

cat > templates/checkout.html <<"HTML"
<!DOCTYPE html><html lang="es"><head><meta charset="UTF-8"><title>Comprar</title><link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}"></head><body><h1>Comprar entradas para {{ funcion['titulo'] }}</h1><p>{{ funcion['fecha'] }} - {{ funcion['hora'] }} ({{ funcion['sala'] }})</p><p>Entradas disponibles: {{ funcion['stock'] }}</p>{% if error %}<p class="error">{{ error }}</p>{% endif %}<form method="post"><label>Cantidad:</label><input type="number" name="cantidad" min="1" required><button type="submit">Confirmar</button></form><a href="/">â¬… Volver</a></body></html>
HTML

cat > templates/confirm.html <<"HTML"
<!DOCTYPE html><html lang="es"><head><meta charset="UTF-8"><title>ConfirmaciÃ³n</title><link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}"></head><body><h1>ðŸŽŸ Â¡Compra confirmada!</h1><p>Has comprado {{ qty }} entradas para <strong>{{ titulo }}</strong>.</p><a href="/">â¬… Volver al inicio</a></body></html>
HTML

cat > static/style.css <<"CSS"
body { font-family: Arial; background:#fafafa; text-align:center; } h1{color:#b71c1c;} .movies{display:flex;flex-wrap:wrap;justify-content:center;gap:1rem;} .card{background:white;border:1px solid #ddd;padding:1rem;width:220px;border-radius:8px;box-shadow:1px 1px 5px #ccc;} .card a{background:#b71c1c;color:white;padding:6px 12px;border-radius:4px;text-decoration:none;} table{margin:auto;border-collapse:collapse;} td,th{border:1px solid #ccc;padding:6px 12px;}
CSS

python3 db_init.py

cat > /etc/systemd/system/cineapp.service <<UNIT
[Unit]
Description=CineTickets Flask App
After=network.target
[Service]
User=root
WorkingDirectory=/opt/cineapp
ExecStart=/usr/local/bin/gunicorn -w 4 -b 0.0.0.0:${server_port} app:app
Restart=always
[Install]
WantedBy=multi-user.target
UNIT

systemctl daemon-reload
systemctl enable --now cineapp.service
